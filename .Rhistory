dev.off()
}
group_index
group <- names(traits)[group_index]
group_traits <- traits[[group]][,1:2]
group_summstats <- summstats[[grep(group, names(summstats))]]
group_summstats$species <- sub(" ","_", group_summstats$species)
merged_table <- merge(group_summstats, group_traits, by.x="species", by.y="Species")
cleaned_table <- merged_table[-which(cleaned_table$mean_bio1=="not_enough_points"),c("mean_bio1","mean_bio12","Dispersal_mode")]
cleaned_table_biotic <- cleaned_table[which(cleaned_table$Dispersal_mode=="Biotic"),-3]
cleaned_table_abiotic <- cleaned_table[which(cleaned_table$Dispersal_mode=="Abiotic"),-3]
pdf(paste0(getwd(), "/", group, ".pdf"))
par(mfrow=c(1,2))
x <- densCols(cleaned_table_biotic$mean_bio1, cleaned_table_biotic$mean_bio12, colramp=colorRampPalette(c("black", "white")))
x
x <- densCols(cleaned_table_biotic$mean_bio1, cleaned_table_biotic$mean_bio12, colramp=colorRampPalette(c("black", "white")))
cleaned_table_biotic$mean_bio1
group <- names(traits)[group_index]
group_traits <- traits[[group]][,1:2]
group_summstats <- summstats[[grep(group, names(summstats))]]
group_summstats$species <- sub(" ","_", group_summstats$species)
group_summstats
merged_table <- merge(group_summstats, group_traits, by.x="species", by.y="Species")
merged_table
cleaned_table <- merged_table[-which(cleaned_table$mean_bio1=="not_enough_points"),c("mean_bio1","mean_bio12","Dispersal_mode")]
cleaned_table
merged_table
which(merged_table$mean_bio1=="not_enough_points")
cleaned_table <- merged_table[-which(merged_table$mean_bio1=="not_enough_points"),c("mean_bio1","mean_bio12","Dispersal_mode")]
cleaned_table
for(group_index in 1:length(labels)) {
group <- names(traits)[group_index]
group_traits <- traits[[group]][,1:2]
group_summstats <- summstats[[grep(group, names(summstats))]]
group_summstats$species <- sub(" ","_", group_summstats$species)
merged_table <- merge(group_summstats, group_traits, by.x="species", by.y="Species")
cleaned_table <- merged_table[-which(merged_table$mean_bio1=="not_enough_points"),c("mean_bio1","mean_bio12","Dispersal_mode")]
cleaned_table_biotic <- cleaned_table[which(cleaned_table$Dispersal_mode=="Biotic"),-3]
cleaned_table_abiotic <- cleaned_table[which(cleaned_table$Dispersal_mode=="Abiotic"),-3]
pdf(paste0(getwd(), "/", group, ".pdf"))
par(mfrow=c(1,2))
x <- densCols(cleaned_table_biotic$mean_bio1, cleaned_table_biotic$mean_bio12, colramp=colorRampPalette(c("black", "white")))
cleaned_table_biotic$dens <- col2rgb(x)[1,] + 1L
cols <-  colorRampPalette(c("#000099", "#00FEFF", "#45FE4F",
"#FCFF00", "#FF9400", "#FF3100"))(256)
cleaned_table_biotic$col <- cols[cleaned_table_biotic$dens]
plot(mean_bio12~mean_bio1, data=cleaned_table_biotic[order(cleaned_table_biotic$dens),], pch=20, col=col, cex=2, ylim=c(0,4000), xlim=c(-100,300))
title("biotic")
x <- densCols(cleaned_table_abiotic$mean_bio1, cleaned_table_abiotic$mean_bio12, colramp=colorRampPalette(c("black", "white")))
cleaned_table_abiotic$dens <- col2rgb(x)[1,] + 1L
cols <-  colorRampPalette(c("#000099", "#00FEFF", "#45FE4F",
"#FCFF00", "#FF9400", "#FF3100"))(256)
cleaned_table_abiotic$col <- cols[cleaned_table_abiotic$dens]
plot(mean_bio12~mean_bio1, data=cleaned_table_abiotic[order(cleaned_table_abiotic$dens),], pch=20, col=col, cex=2, ylim=c(0,4000), xlim=c(-100,300))
title("abiotic")
dev.off()
}
group_index
for(group_index in 1:length(labels)) {
group <- names(traits)[group_index]
group_traits <- traits[[group]][,1:2]
group_summstats <- summstats[[grep(group, names(summstats))]]
group_summstats$species <- sub(" ","_", group_summstats$species)
merged_table <- merge(group_summstats, group_traits, by.x="species", by.y="Species")
cleaned_table <- merged_table[-which(merged_table$mean_bio1=="not_enough_points"),c("mean_bio1","mean_bio12","Dispersal_mode")]
cleaned_table_biotic <- cleaned_table[which(cleaned_table$Dispersal_mode=="Biotic"),-3]
cleaned_table_abiotic <- cleaned_table[which(cleaned_table$Dispersal_mode=="Abiotic"),-3]
pdf(paste0(getwd(), "/", group, ".pdf"), height=4, width=8)
par(mfrow=c(1,2))
x <- densCols(cleaned_table_biotic$mean_bio1, cleaned_table_biotic$mean_bio12, colramp=colorRampPalette(c("black", "white")))
cleaned_table_biotic$dens <- col2rgb(x)[1,] + 1L
cols <-  colorRampPalette(c("#000099", "#00FEFF", "#45FE4F",
"#FCFF00", "#FF9400", "#FF3100"))(256)
cleaned_table_biotic$col <- cols[cleaned_table_biotic$dens]
plot(mean_bio12~mean_bio1, data=cleaned_table_biotic[order(cleaned_table_biotic$dens),], pch=20, col=col, cex=2, ylim=c(0,4000), xlim=c(-100,300))
title("biotic")
x <- densCols(cleaned_table_abiotic$mean_bio1, cleaned_table_abiotic$mean_bio12, colramp=colorRampPalette(c("black", "white")))
cleaned_table_abiotic$dens <- col2rgb(x)[1,] + 1L
cols <-  colorRampPalette(c("#000099", "#00FEFF", "#45FE4F",
"#FCFF00", "#FF9400", "#FF3100"))(256)
cleaned_table_abiotic$col <- cols[cleaned_table_abiotic$dens]
plot(mean_bio12~mean_bio1, data=cleaned_table_abiotic[order(cleaned_table_abiotic$dens),], pch=20, col=col, cex=2, ylim=c(0,4000), xlim=c(-100,300))
title("abiotic")
dev.off()
}
cleaned_table_abiotic
pca(cleaned_table_abiotic$mean_bio1, cleaned_table_abiotic$mean_bio12)
?pca
??pca
prcomp(cleaned_table_abiotic$mean_bio1, cleaned_table_abiotic$mean_bio12)
cleaned_table_abiotic[,1:2]
prcomp(cleaned_table_abiotic[,1:2])
wd <- "~/2021_SeedDispersal/"
setwd(wd)
Rsaves <- paste0(wd, "res_corhmm/", dir("res_corhmm/"))
labels <- unlist(lapply(strsplit(dir("res_corhmm/"), "-"), function(x) x[1]))
Rsaves
labels
file <- Rsaves[1]
file
load(file)
for(i in 1:length(obj)){
CorRes_i <- obj[[i]]
Model <- CorRes_i$solution
AICc <- round(CorRes_i$AICc, 2)
AICwt <- 0
MeanRate <- round(mean(CorRes_i$solution, na.rm = TRUE),2)
Model[is.na(Model)] <- 0
ASR <-  round(CorRes_i$states[1,][which.max(CorRes_i$states[1,])], 2)
ASR <-  paste(names(ASR), paste(ASR*100, "%", sep = ""))
k.rate <- max(CorRes_i$index.mat, na.rm = TRUE)
diag(Model) <- -rowSums(Model)
Eq <- c(Null(Model))/sum(Null(Model))
EntUncond <- sum(Eq*-log2(Eq))
EntCond <- mean(rowSums(CorRes_i$states * -log2(CorRes_i$states)))
MutInfo <- round(EntUncond - EntCond, 2)
#PropInfo <- round(MutInfo/EntUncond*100, 2)
ResTable[count,] <- c(k.rate, AICc, AICwt, MeanRate, ASR)
count <- count + 1
}
lapply(obj, function(x) x$AICc)
unlist(lapply(obj, function(x) x$AICc))
AICc <- unlist(lapply(obj, function(x) x$AICc))
AICc
AICwt <- exp(-0.5 * AICc - min(AICc))/sum(exp(-0.5 * AICc - min(AICc)))
AICwt
sum(AICwt)
Solutions <- lapply(obj, function(x) x$solution)
Solutions
Solutions
Solutions[[1]]
require(corHMM)
obj[[1]]
obj[[1]]$phy
phy <- obj[[1]]$phy
phy
dat <- obj[[1]]$data
dat
file <- Rsaves[1]
load(file)
phy <- obj[[1]]$phy
dat <- obj[[1]]$data
phy
dat
obj[[1]]$solution
RateMat <- obj[[1]]$solution
RateMat
p.mk <- obj[[1]]$solution[1,2]
p.mk
getStateMat4Dat(dat, "ER")
rate.mat <- getStateMat4Dat(dat, "ER")$rate.mat
rate.mat
rate.mat <- getFullMat(list(R1, R1), R1)
R1 <- getStateMat4Dat(dat, "ER")$rate.mat
rate.mat <- getFullMat(list(R1, R1), R1)
rate.mat
rate.mat[rate.mat == 2] <- 1
rate.mat
R1 <- getStateMat4Dat(dat, "ER")$rate.mat
rate.mat <- getFullMat(list(R1, R1), R1)
rate.mat
corHMM(phy, dat, 2, rate.mat = rate.mat, p = c(p.mk, p.mk, 0))
corHMM(phy, dat, 2, rate.mat = rate.mat, p = c(p.mk, p.mk, p.mk))
obj[[1]]$loglik
corHMM(phy, dat, 2, rate.mat = rate.mat, p = c(p.mk, p.mk, p.mk))
# test that the we can make a HMM structure with a MK model and get the same likelihood (this will allow us to model average MK and HMMs)
file <- Rsaves[1]
load(file)
phy <- obj[[1]]$phy
dat <- obj[[1]]$data
p.mk <- obj[[1]]$solution[1,2]
R1 <- getStateMat4Dat(dat, "ER")$rate.mat
rate.mat <- getFullMat(list(R1, R1), R1)
MK_LogLik <- obj[[1]]$loglik
MK2HMM_LogLik <- corHMM(phy, dat, 2, rate.mat = rate.mat, p = c(p.mk, p.mk, p.mk))$loglik
MK2HMM_LogLik
MK_LogLik
MK_LogLik == MK_LogLik
MK2HMM_LogLik <- corHMM(phy, dat, 2, rate.mat = rate.mat, p = c(p.mk, p.mk, 1))$loglik
MK_LogLik == MK_LogLik
MK2HMM_LogLik
MK_LogLik
corHMM(phy, dat, 2, rate.mat = rate.mat, p = c(p.mk, p.mk, 1))
MK2HMM_LogLik <- corHMM(phy, dat, 2, rate.mat = rate.mat, p = c(p.mk, p.mk, 0.000001))$loglik
MK2HMM_LogLik
MK_LogLik == MK_LogLik
obj[[2]]$solution
R1 <- getStateMat4Dat(dat, "ARD")$rate.mat
R1
na.omit(obj[[2]]$solution)
na.omit(c(obj[[2]]$solution))
p.mk <- as.vector(na.omit(c(obj[[2]]$solution)))
p.mk
p.mk <- as.vector(na.omit(c(obj[[2]]$solution)))
R1 <- getStateMat4Dat(dat, "ARD")$rate.mat
getRateCatMat(2)
p.mk <- as.vector(na.omit(c(obj[[2]]$solution)))
R1 <- getStateMat4Dat(dat, "ARD")$rate.mat
rate.mat <- getFullMat(list(R1, R1), R1)
rate.mat
MK_LogLik <- obj[[1]]$loglik
MK_LogLik
MK_LogLik <- obj[[2]]$loglik
MK_LogLik
p <- c(p.mk[1], p.mk[2], p.mk[1], p.mk[2], 1, 1)
p
p <- c(p.mk[1], p.mk[2], p.mk[1], p.mk[2], 1, 1)
MK_LogLik <- obj[[2]]$loglik
MK2HMM_LogLik <- corHMM(phy, dat, 2, rate.mat = rate.mat, p = p)
MK2HMM_LogLik
MK2HMM_LogLik
MK2HMM_LogLik$loglik
MK_LogLik
# test that the we can make a HMM structure with a MK model and get the same likelihood (this will allow us to model average MK and HMMs)
file <- Rsaves[1]
load(file)
phy <- obj[[1]]$phy
dat <- obj[[1]]$data
p.mk <- as.vector(na.omit(c(obj[[2]]$solution)))
R1 <- getStateMat4Dat(dat, "ARD")$rate.mat
rate.mat <- getFullMat(list(R1, R1), R1)
p <- c(p.mk[1], p.mk[2], p.mk[1], p.mk[2], 1, 1)
MK_LogLik <- obj[[2]]$loglik
MK2HMM_LogLik <- corHMM(phy, dat, 2, rate.mat = rate.mat, p = p)
MK_LogLik == MK2HMM_LogLik$loglik
MK_LogLik
round(MK_LogLik, 5) == round(MK2HMM_LogLik$loglik, 5)
MK_LogLik
MK2HMM_LogLik$loglik
# test that the we can make a HMM structure with a MK model and get the same likelihood (this will allow us to model average MK and HMMs)
file <- Rsaves[1]
load(file)
phy <- obj[[1]]$phy
dat <- obj[[1]]$data
p.mk <- as.vector(na.omit(c(obj[[2]]$solution)))
R1 <- getStateMat4Dat(dat, "ARD")$rate.mat
rate.mat <- getFullMat(list(R1, R1), R1)
p <- c(p.mk[1], p.mk[2], p.mk[1], p.mk[2], 1e-5, 1e-5)
MK_LogLik <- obj[[2]]$loglik
MK2HMM_LogLik <- corHMM(phy, dat, 2, rate.mat = rate.mat, p = p)
round(MK_LogLik, 5) == round(MK2HMM_LogLik$loglik, 5)
MK2HMM_LogLik
# test that the we can make a HMM structure with a MK model and get the same likelihood (this will allow us to model average MK and HMMs)
file <- Rsaves[1]
load(file)
phy <- obj[[1]]$phy
dat <- obj[[1]]$data
p.mk <- as.vector(na.omit(c(obj[[2]]$solution)))
R1 <- getStateMat4Dat(dat, "ARD")$rate.mat
rate.mat <- getFullMat(list(R1, R1), R1)
p <- c(p.mk[1], p.mk[2], p.mk[1], p.mk[2], 1e-10, 1e-10)
MK_LogLik <- obj[[2]]$loglik
MK2HMM_LogLik <- corHMM(phy, dat, 2, rate.mat = rate.mat, p = p)
round(MK_LogLik, 5) == round(MK2HMM_LogLik$loglik, 5)
MK2HMM_LogLik
MK2HMM_LogLik$loglik == MK_LogLik
Solutions
Solutions <- lapply(obj, function(x) na.omit(c(x$solution)))
Solutions
Solutions <- lapply(obj, function(x) c(na.omit(c(x$solution))))
Solutions
Solutions
Solutoins[[1]]
Solutions[[1]]
c(Solutions[[1]][1], NA, Solutions[[1]][2], NA)
obj[[4]]$solution
Solutions
Solutions[[1]] <-  c(Solutions[[1]][1], NA, Solutions[[1]][2], NA,
Solutions[[1]][1], NA, Solutions[[1]][2], NA,)
Solutions[[2]] <-  c(Solutions[[2]][1], NA, Solutions[[2]][2], NA,
Solutions[[2]][1], NA, Solutions[[2]][2], NA,)
Solutions[[1]] <-  c(Solutions[[1]][1], NA, Solutions[[1]][2], NA,
Solutions[[1]][1], NA, Solutions[[1]][2], NA)
Solutions[[2]] <-  c(Solutions[[2]][1], NA, Solutions[[2]][2], NA,
Solutions[[2]][1], NA, Solutions[[2]][2], NA)
Solutions
do.call(rbind, Solutions)
Solutions <- do.call(rbind, Solutions)
Solutions
# model averaged corhmm runs
AICc <- unlist(lapply(obj, function(x) x$AICc))
AICwt <- exp(-0.5 * AICc - min(AICc))/sum(exp(-0.5 * AICc - min(AICc)))
Solutions <- lapply(obj, function(x) c(na.omit(c(x$solution))))
Solutions[[1]] <-  c(Solutions[[1]][1], NA, Solutions[[1]][2], NA,
Solutions[[1]][1], NA, Solutions[[1]][2], NA)
Solutions[[2]] <-  c(Solutions[[2]][1], NA, Solutions[[2]][2], NA,
Solutions[[2]][1], NA, Solutions[[2]][2], NA)
Rates <- do.call(rbind, Solutions)
Rates
AICwt
Solutions
Rates
Rates[,1]
Q <- Rates[,1]
Q
Weights
Weights <- AICwt
Weights
is.na(Rates)
is.na(Q)
Q
Q <- Rates[,2]
Q
is.na(Q)
Weights[!is.na(Q)]
Weights
Weights <- Weights[!is.na(Q)]/sum(Weights[!is.na(Q)])
Weights
Q
Q[!is.na(Q)]
Q[!is.na(Q)]
Q
Q[!is.na(Q)]
Weights
Q[!is.na(Q)] * Weights
sum(Q[!is.na(Q)] * Weights)
Rates
Solutions
Rates
Rates
WtQ(Rates[,1], AICwt)
## functions
WtQ <- function(Q, Weights){
Weights <- Weights[!is.na(Q)]/sum(Weights[!is.na(Q)])
AvgQ <- sum(Q[!is.na(Q)] * Weights)
return(AvgQ)
}
WtQ(Rates[,1], AICwt)
apply(Rates, 2, function(x) WtQ(x, AICwt))
p.wt <- apply(Rates, 2, function(x) WtQ(x, AICwt))
p.wt
Solutions
obj$res_ARD.ARD.2
obj$res_ARD.ARD.2$index.mat
rate.mat <- obj$res_ARD.ARD.2$index.mat
rate.mat
rate.mat
is.na(rate.mat)
rate.mat[!is.na(rate.mat)] <- p.wt
rate.mat
AICwt
Rates
rate.mat
rate.mat[!is.na(rate.mat)] <- 1:8
rate.mat
p.wt
# model averaged corhmm runs
rate.mat <- obj$res_ARD.ARD.2$index.mat
AICc <- unlist(lapply(obj, function(x) x$AICc))
AICc
AICwt <- exp(-0.5 * AICc - min(AICc))/sum(exp(-0.5 * AICc - min(AICc)))
AICwt
Solutions <- lapply(obj, function(x) c(na.omit(c(x$solution))))
Solutions
Solutions <- lapply(obj, function(x) x$solution)
Solutions
Rates
Solutions
Solutions[[1]] <-  c(Solutions[[1]][1], NA, Solutions[[1]][2], NA,
NA, Solutions[[1]][1], NA, Solutions[[1]][2])
Solutions[[1]] <-  c(Solutions[[1]][1], NA, Solutions[[1]][2], NA,
NA, Solutions[[1]][1], NA, Solutions[[1]][2])
Solutions[[2]] <-  c(Solutions[[2]][1], NA, Solutions[[2]][2], NA,
NA, Solutions[[2]][1], NA, Solutions[[2]][2])
Rates <- do.call(rbind, Solutions)
Solutions
Solutions <- lapply(obj, function(x) c(na.omit(c(x$solution))))
Solutions[[1]] <-  c(Solutions[[1]][1], NA, Solutions[[1]][2], NA,
NA, Solutions[[1]][1], NA, Solutions[[1]][2])
Solutions[[2]] <-  c(Solutions[[2]][1], NA, Solutions[[2]][2], NA,
NA, Solutions[[2]][1], NA, Solutions[[2]][2])
Rates <- do.call(rbind, Solutions)
Rates
lapply(obj, function(x) c(na.omit(c(x$solution))))
lapply(obj, function(x) x$solution)
Solutions
Solutions <- lapply(obj, function(x) c(na.omit(c(x$solution))))
Solutions[[1]] <-  c(Solutions[[1]][1], NA, Solutions[[1]][2], NA,
NA, Solutions[[1]][1], NA, Solutions[[1]][2])
Solutions[[2]] <-  c(Solutions[[2]][1], NA, Solutions[[2]][2], NA,
NA, Solutions[[2]][1], NA, Solutions[[2]][2])
Rates <- do.call(rbind, Solutions)
Rates
p.wt <- apply(Rates, 2, function(x) WtQ(x, AICwt))
p.wt
rate.mat[!is.na(rate.mat)] <- p.wt
rate.mat
file
getModelAvgRate(Rsaves[1])
## functions
WtQ <- function(Q, Weights){
Weights <- Weights[!is.na(Q)]/sum(Weights[!is.na(Q)])
AvgQ <- sum(Q[!is.na(Q)] * Weights)
return(AvgQ)
}
getModelAvgRate <- function(file){
load(file)
rate.mat <- obj$res_ARD.ARD.2$index.mat
AICc <- unlist(lapply(obj, function(x) x$AICc))
AICwt <- exp(-0.5 * AICc - min(AICc))/sum(exp(-0.5 * AICc - min(AICc)))
# Solutions <- lapply(obj, function(x) x$solution)
Solutions <- lapply(obj, function(x) c(na.omit(c(x$solution))))
Solutions[[1]] <-  c(Solutions[[1]][1], NA, Solutions[[1]][2], NA,
NA, Solutions[[1]][1], NA, Solutions[[1]][2])
Solutions[[2]] <-  c(Solutions[[2]][1], NA, Solutions[[2]][2], NA,
NA, Solutions[[2]][1], NA, Solutions[[2]][2])
Rates <- do.call(rbind, Solutions)
p.wt <- apply(Rates, 2, function(x) WtQ(x, AICwt))
rate.mat[!is.na(rate.mat)] <- p.wt
return(rate.mat)
}
getModelAvgRate(Rsaves[1])
getModelAvgRate(Rsaves[2])
getModelAvgRate(Rsaves[3])
getModelAvgRate(Rsaves[4])
getModelAvgRate(Rsaves[1])
testMkToHMM <- function(file){
load(file)
phy <- obj[[1]]$phy
dat <- obj[[1]]$data
p.mk <- as.vector(na.omit(c(obj[[2]]$solution)))
R1 <- getStateMat4Dat(dat, "ARD")$rate.mat
rate.mat <- getFullMat(list(R1, R1), R1)
p <- c(p.mk[1], p.mk[2], p.mk[1], p.mk[2], 1e-10, 1e-10)
MK_LogLik <- obj[[2]]$loglik
MK2HMM_LogLik <- corHMM(phy, dat, 2, rate.mat = rate.mat, p = p)
return(round(MK_LogLik, 5) == round(MK2HMM_LogLik$loglik, 5))
}
testMkToHMM(Rsaves[1])
testMkToHMM(Rsaves[2])
file <- Rsaves[2]
phy <- obj[[1]]$phy
dat <- obj[[1]]$data
p.mk <- as.vector(na.omit(c(obj[[2]]$solution)))
p.mk
R1 <- getStateMat4Dat(dat, "ARD")$rate.mat
rate.mat <- getFullMat(list(R1, R1), R1)
p <- c(p.mk[1], p.mk[2], p.mk[1], p.mk[2], 1e-10, 1e-10)
p
MK_LogLik <- obj[[2]]$loglik
MK2HMM_LogLik <- corHMM(phy, dat, 2, rate.mat = rate.mat, p = p, node.states = "none")
round(MK_LogLik, 5) == round(MK2HMM_LogLik$loglik, 5)
testMkToHMM <- function(file){
load(file)
phy <- obj[[1]]$phy
dat <- obj[[1]]$data
p.mk <- as.vector(na.omit(c(obj[[2]]$solution)))
R1 <- getStateMat4Dat(dat, "ARD")$rate.mat
rate.mat <- getFullMat(list(R1, R1), R1)
p <- c(p.mk[1], p.mk[2], p.mk[1], p.mk[2], 1e-10, 1e-10)
MK_LogLik <- obj[[2]]$loglik
MK2HMM_LogLik <- corHMM(phy, dat, 2, rate.mat = rate.mat, p = p, node.states = "none")
return(round(MK_LogLik, 5) == round(MK2HMM_LogLik$loglik, 5))
}
# test that the we can make a HMM structure with a MK model and get the same likelihood (this will allow us to model average MK and HMMs)
testMkToHMM(Rsaves[1])
testMkToHMM(Rsaves[2])
testMkToHMM(Rsaves[3])
testMkToHMM(Rsaves[4])
file <- Rsaves[2]
phy <- obj[[1]]$phy
dat <- obj[[1]]$data
p.mk <- as.vector(na.omit(c(obj[[2]]$solution)))
p.mk
R1 <- getStateMat4Dat(dat, "ARD")$rate.mat
rate.mat <- getFullMat(list(R1, R1), R1)
p <- c(p.mk[1], p.mk[2], p.mk[1], p.mk[2], 1e-10, 1e-10)
obj[[2]]$loglik
load(file)
phy <- obj[[1]]$phy
dat <- obj[[1]]$data
p.mk <- as.vector(na.omit(c(obj[[2]]$solution)))
R1 <- getStateMat4Dat(dat, "ARD")$rate.mat
rate.mat <- getFullMat(list(R1, R1), R1)
p <- c(p.mk[1], p.mk[2], p.mk[1], p.mk[2], 1e-10, 1e-10)
MK_LogLik <- obj[[2]]$loglik
MK2HMM_LogLik <- corHMM(phy, dat, 2, rate.mat = rate.mat, p = p, node.states = "none")
MK2HMM_LogLik
p <- c(p.mk[1], p.mk[2], p.mk[1], p.mk[2], 1, 1)
MK_LogLik <- obj[[2]]$loglik
MK2HMM_LogLik <- corHMM(phy, dat, 2, rate.mat = rate.mat, p = p, node.states = "none")
MK2HMM_LogLik
MK_LogLik
testMkToHMM <- function(file){
load(file)
phy <- obj[[1]]$phy
dat <- obj[[1]]$data
p.mk <- as.vector(na.omit(c(obj[[2]]$solution)))
R1 <- getStateMat4Dat(dat, "ARD")$rate.mat
rate.mat <- getFullMat(list(R1, R1), R1)
p <- c(p.mk[1], p.mk[2], p.mk[1], p.mk[2], 1, 1)
MK_LogLik <- obj[[2]]$loglik
MK2HMM_LogLik <- corHMM(phy, dat, 2, rate.mat = rate.mat, p = p, node.states = "none")
return(round(MK_LogLik, 5) == round(MK2HMM_LogLik$loglik, 5))
}
## imports
require(corHMM)
# file organization
wd <- "~/2021_SeedDispersal/"
setwd(wd)
Rsaves <- paste0(wd, "res_corhmm/", dir("res_corhmm/"))
labels <- unlist(lapply(strsplit(dir("res_corhmm/"), "-"), function(x) x[1]))
# test that the we can make a HMM structure with a MK model and get the same likelihood (this will allow us to model average MK and HMMs)
testMkToHMM(Rsaves[1])
testMkToHMM(Rsaves[2])
testMkToHMM(Rsaves[3])
testMkToHMM(Rsaves[4])
# model averaged corhmm runs
getModelAvgRate(Rsaves[1])
getModelAvgRate(Rsaves[2])
getModelAvgRate(Rsaves[3])
getModelAvgRate(Rsaves[4])
